package com.mcnc.sm.hiplus.domain.menu.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mcnc.bizmob.web.domain.menu.dto.MenuDto;
import com.mcnc.bizmob.web.domain.menu.dto.request.DeleteMenuRequest;
import com.mcnc.bizmob.web.domain.menu.dto.request.GetMenuDetailRequest;
import com.mcnc.bizmob.web.domain.menu.dto.request.RegisterMenuRequest;
import com.mcnc.bizmob.web.domain.menu.dto.request.UpdateMenuRequest;
import com.mcnc.bizmob.web.domain.menu.dto.response.DeleteMenuResponse;
import com.mcnc.bizmob.web.domain.menu.dto.response.GetMenuDetailResponse;
import com.mcnc.bizmob.web.domain.menu.dto.response.GetMenuListResponse;
import com.mcnc.bizmob.web.domain.menu.dto.response.RegisterMenuResponse;
import com.mcnc.bizmob.web.domain.menu.dto.response.UpdateMenuResponse;
import com.mcnc.sm.hiplus.domain.menu.mapper.MenuMapper;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class MenuServiceImpl implements MenuService {
	
	@Autowired
	private MenuMapper menuMapper;
	
	/**
	 * 메뉴 관리 조회
	 */
	@Override
	public GetMenuListResponse getMenuList() {
		List<MenuDto> menuList = getMenuList(null);
		
		return GetMenuListResponse.builder()
				.menuList(menuList)
				.build();
	}
	
	/**
	 * @title 사이드 메뉴 조회 
	 * 
	 */
	@Override
	public GetMenuListResponse getSideMenuList() {
		List<MenuDto> menuList = getSideMenuList(null);
		
		return GetMenuListResponse.builder()
				.menuList(menuList)
				.build();
	}
	
	/**
	 * 메뉴 관리 조회
	 * @param parentMenuId
	 * @return
	 */
	private List<MenuDto> getMenuList(String parentMenuId) {
		List<MenuDto> parentCategoryList = menuMapper.selectMenuList(parentMenuId);
		
	    for (MenuDto parent : parentCategoryList) {
	        List<MenuDto> subMenuList = getMenuList(parent.getMenuId()); 
	        parent.setSubMenuList(subMenuList); 
	    }
		return parentCategoryList;
		
	}
	
	/**
	 * 사이드 메뉴 조회 
	 * @param parentMenuId
	 * @return
	 */
	private List<MenuDto> getSideMenuList(String parentMenuId) {
		List<MenuDto> parentCategoryList = menuMapper.selectSideMenuList(parentMenuId);
		
	    for (MenuDto parent : parentCategoryList) {
	        List<MenuDto> subMenuList = getSideMenuList(parent.getMenuId()); 
	        parent.setSubMenuList(subMenuList); 
	    }
		return parentCategoryList;
		
	}
	


	@Override
	public GetMenuDetailResponse getMenuDetail(GetMenuDetailRequest request) {
		MenuDto menuDetail = menuMapper.selectMenuDetail(request.getMenuId());
		
		return menuDetail.toResponseDetail();
	}

	@Override
	public RegisterMenuResponse registerMenu(RegisterMenuRequest request) {
		MenuDto menu = request.toDto();
		
		String menuId = menuMapper.selectNextCodeId();
		menu.setMenuId(menuId);
		
		int res = menuMapper.insertMenu(menu);

		return RegisterMenuResponse.builder()
				.menuId(menuId)
				.build();
	}

	@Override
	public UpdateMenuResponse updateMenu(UpdateMenuRequest request) {
		MenuDto menu = request.toDto();
		
		int res = menuMapper.updateMenu(menu);
		
		return UpdateMenuResponse.builder()
				.menuId(menu.getMenuId())
				.build();
	}

	@Override
	public DeleteMenuResponse deleteMenu(DeleteMenuRequest request) {
		String menuId = request.getMenuId();
		// 메뉴에 해당하는 하위 메뉴도 일괄삭제
		int res = menuMapper.deleteMenu(menuId);
		
		return DeleteMenuResponse.builder()
				.menuId(menuId)
				.build();
	}
	
}
