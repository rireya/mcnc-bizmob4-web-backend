package com.mcnc.bizmob.web.domain.board.notice.service;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.web.multipart.MultipartFile;

import com.mcnc.bizmob.web.domain.attachFile.dto.AttachFileDto;
import com.mcnc.bizmob.web.domain.attachFile.dto.AttachFileInfo;
import com.mcnc.bizmob.web.domain.attachFile.mapper.AttachFileMapper;
import com.mcnc.bizmob.web.domain.board.notice.dto.NoticeBoardDto;
import com.mcnc.bizmob.web.domain.board.notice.dto.NoticeBoardSearchDto;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.DeleteNoticeDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.DeleteNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.DisplayFlagNoticeDocInfo;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.GetNoticeBoardDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.GetNoticeDocDetailRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.RegisterNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.UpdateDisplayFlagNoticeDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.UpdateNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.GetNoticeBoardDocListResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.GetNoticeBoardDocResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.GetNoticeDocDetailResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.RegisterNoticeDocResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.UpdateNoticeDocResponse;
import com.mcnc.bizmob.web.domain.board.notice.enums.FlagType;
import com.mcnc.bizmob.web.domain.board.notice.mapper.NoticeMapper;
import com.mcnc.bizmob.web.domain.commonCode.enums.BoardType;
import com.mcnc.bizmob.web.domain.commonCode.service.CommonCodeService;
import com.mcnc.bizmob.web.global.exception.ErrorCode;
import com.mcnc.bizmob.web.global.exception.InternalServerException;
import com.mcnc.bizmob.web.global.service.OCIObjectStorageService;
import com.mcnc.sm.hiplus.global.util.PageUtils;
import com.oracle.bmc.model.BmcException;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@Transactional
public class NoticeServiceImpl implements NoticeService {
	
	@Autowired
	private OCIObjectStorageService ociService;
	
	@Autowired
	private NoticeMapper noticeMapper;
	
	@Autowired
	private AttachFileMapper fileMapper;
	
	@Autowired
	private CommonCodeService commonCodeService;
	
	
	/**
	 * 공지 목록 조회
	 */
	@Override
	public GetNoticeBoardDocListResponse getNoticeBoardDocList(GetNoticeBoardDocListRequest request) {
	    NoticeBoardSearchDto searchNoticeDto = request.toDto();

	    String subCateId = request.getSubCategoryId();
	    String parentCateId = request.getParentCategoryId();

	    List<String> categoryIds = commonCodeService.getBoardCategoryIds(parentCateId, subCateId, BoardType.NOTICE);
	    searchNoticeDto.setCategoryIds(categoryIds);

	    if ("APP".equalsIgnoreCase(request.getRequestSource())) {
	        searchNoticeDto.setDisplayFlag(FlagType.Y);
	    }

	    int[] rows = PageUtils.calculateRowBounds(request.getPageNo(), request.getPageSize());
	    searchNoticeDto.setStartRow(rows[0]);
	    searchNoticeDto.setEndRow(rows[1]);

	    int totalDocCnt = noticeMapper.selectNoticeBoardDocCount(searchNoticeDto);
	    List<NoticeBoardDto> docList = noticeMapper.selectNoticeBoardDocList(searchNoticeDto);

	    List<GetNoticeBoardDocResponse> docs = new ArrayList<>();
	    for (NoticeBoardDto noticeBoardDto : docList) {
	        docs.add(noticeBoardDto.of());
	    }

	    return GetNoticeBoardDocListResponse.builder()
	            .noticeBoardDocs(docs)
	            .totalCnt(totalDocCnt)
	            .build();
	}

	
	/**
	 * 공지 등록
	 */
	@Override
	public RegisterNoticeDocResponse registerNoticeDoc(RegisterNoticeDocRequest request, List<MultipartFile> newImageFiles) {
		NoticeBoardDto noticeDoc = request.toDto();
		String docId = noticeMapper.selectNextNoticeDocId();
		noticeDoc.setDocIdBySeq(docId);
		
		if (!CollectionUtils.isEmpty(newImageFiles)) { // 리스트가 비어있지 않은지 체크
		    noticeDoc.setAttachFlag(FlagType.Y);
		}
		
		int res = noticeMapper.insertNoticeDoc(noticeDoc);
		if(res != 1) {
			throw new InternalServerException(ErrorCode.DOC_REGISTER_FAIL);
		}
		
		List<AttachFileInfo> reqImgFiles = request.getImageFiles();

		if (reqImgFiles != null && !reqImgFiles.isEmpty()) {
		    if (newImageFiles == null || newImageFiles.isEmpty() ||
		        newImageFiles.get(0) == null || 
		        StringUtils.isEmpty(newImageFiles.get(0).getOriginalFilename())) {
		        
		        log.error("파일이 누락되었습니다. newImageFiles: {}", newImageFiles);
		        throw new InternalServerException(ErrorCode.IMAGE_FILES_NULL);
		    }
		}

	    
	    for (int i = 0; i < reqImgFiles.size(); i++) {
	        AttachFileDto reqImgFileDto = reqImgFiles.get(i).toNewDto();
	        MultipartFile imgFile = newImageFiles.get(i);
	        if(imgFile == null) {
	        	log.error("파일명 :{} 이 첨부되지 않았습니다" , reqImgFileDto.getFileName());
	        	throw new InternalServerException(ErrorCode.IMAGE_FILES_NULL);
	        }
	        
	        if (!reqImgFileDto.getFileName().equals(imgFile.getOriginalFilename())) {
	        	log.error("동일한 파일({})이 첨부되지 않았습니다" , imgFile.getOriginalFilename());
	        	throw new InternalServerException(ErrorCode.IMAGE_FILES_NULL);
	        }
	        
            String attachId = fileMapper.selectNextAttachFileId();
            
            reqImgFileDto.setAttachId(attachId);
            reqImgFileDto.setDocId(docId);
            reqImgFileDto.setFile(imgFile);
            reqImgFileDto.setBoardType(BoardType.NOTICE);
           
            try {
            	// 순서 중요 (DB 선 저장 후 oci 업로드)
            	String filePath = ociService.generateUniqueFileName(reqImgFileDto);
            	reqImgFileDto.setFilePath(filePath);
            	fileMapper.insertAttachFile(reqImgFileDto);
            	
    	        ociService.upload(reqImgFileDto);
            } catch (BmcException e) {
            	throw new InternalServerException(ErrorCode.DOC_REGISTER_FAIL, e.getMessage());
            } catch (InternalServerException e) {
            	throw new InternalServerException(ErrorCode.DOC_REGISTER_FAIL, e);
            } catch (Exception e) {
                throw new InternalServerException(ErrorCode.DOC_REGISTER_FAIL, e);
            }
	    }
		
		return RegisterNoticeDocResponse.builder()
				.noticeDocId(docId)
				.build();
	}

	/**
	 * 공지 상세
	 */
	@Override
	public GetNoticeDocDetailResponse getNoticeDocDetail(GetNoticeDocDetailRequest request) {
		String noticeDocId = request.getNoticeDocId();
		log.debug("공지사항 게시글 상세 id : {}", noticeDocId);
		
		NoticeBoardDto noticeDoc = noticeMapper.selectNoticeDocDetail(noticeDocId);
		if(noticeDoc == null) {
			throw new InternalServerException(ErrorCode.RESULT_NO_DATA);
		}
		
		List<AttachFileDto> filesDto = fileMapper.selectAttachFileByDocId(noticeDocId);
	    List<AttachFileInfo> files = new ArrayList<>();
	    for (AttachFileDto fileDto : filesDto) {
	    	fileDto.setOciFilePath(ociService.getOCIFileUrl());	    	
	    	files.add(fileDto.of());
	    }
	    
		return GetNoticeDocDetailResponse.builder()
				.noticeDocDetail(noticeDoc)
				.imageFiles(files)
				.build();
	}

	/**
	 * 공지 업데이트 
	 */
	@Override
	public UpdateNoticeDocResponse updateNoticeDoc(UpdateNoticeDocRequest request, List<MultipartFile> newImageFiles) {
		NoticeBoardDto noticeDoc = request.toDto();
		String docId = request.getNoticeDocId();
		
		if ((newImageFiles != null && !newImageFiles.isEmpty()) || 
		    (request.getImageFiles() != null && !request.getImageFiles().isEmpty())) {
		    noticeDoc.setAttachFlag(FlagType.Y);
		} else {
		    noticeDoc.setAttachFlag(FlagType.N); 
		}


        // 삭제 이미지 파일 ID
        List<String> deleteImageFileId = request.getDeleteImageFileIds();
        List<AttachFileInfo> reqImgFiles = request.getImageFiles();

        if (reqImgFiles != null && deleteImageFileId != null) {
            boolean allDeleted = true; // 모든 이미지가 삭제 대상인지 

            for (AttachFileInfo file : reqImgFiles) {
                if (!deleteImageFileId.contains(file.getAttachId())) {
                    allDeleted = false; 
                    break; 
                }
            }

            if (allDeleted) {
                noticeDoc.setAttachFlag(FlagType.N);
            }
        }

		
		// 공지사항 게시글 업데이트
		int res = noticeMapper.updateNoticeDoc(noticeDoc);
		if(res != 1) {
			throw new InternalServerException(ErrorCode.DOC_REGISTER_FAIL);
		}
		
		/**
		 * 신규 이미지 생성 후 삭제이미지 삭제
		 * reqImgFiles 리스트에서 신규인 이미지만 리스트로 추출
		 */
	    List<AttachFileInfo> reqNewImgFiles = new ArrayList<>();
	    for (AttachFileInfo reqImgFile : reqImgFiles) {
	        if (reqImgFile.getAttachId().isEmpty()) {
	            reqNewImgFiles.add(reqImgFile);
	        }
	    }

	    
	    // 신규 이미지 파일 저장
 	    for (int i = 0; i < reqNewImgFiles.size(); i++) {
	        MultipartFile newImgFile = newImageFiles.get(i);
	        AttachFileDto reqImgFileDto = reqNewImgFiles.get(i).toNewDto();
	        
	        if (!reqImgFileDto.getFileName().equals(newImgFile.getOriginalFilename())) {
	        	log.error("파일명이 유효하지 않습니다");
	        	throw new InternalServerException(ErrorCode.DOC_UPDATE_FAIL);
	        }
	        String attachId = fileMapper.selectNextAttachFileId();
            
            reqImgFileDto.setAttachId(attachId);
            reqImgFileDto.setDocId(docId);
            reqImgFileDto.setFile(newImgFile);
            reqImgFileDto.setBoardType(BoardType.NOTICE);
            
            try {
            	// 순서 중요(DB 저장 후 OCI저장)
            	String filePath = ociService.generateUniqueFileName(reqImgFileDto);
            	reqImgFileDto.setFilePath(filePath);
            	fileMapper.insertAttachFile(reqImgFileDto);

            	ociService.upload(reqImgFileDto);
            } catch (BmcException e) {
            	throw new InternalServerException(ErrorCode.DOC_UPDATE_FAIL, e.getMessage());
            } catch (InternalServerException e) {
            	throw new InternalServerException(ErrorCode.DOC_UPDATE_FAIL, e);
            } catch (Exception e) {
            	throw new InternalServerException(ErrorCode.DOC_UPDATE_FAIL, e);
			}
	    }

		// 삭제할 이미지파일 id를 이용해 이미지 삭제
		if (!CollectionUtils.isEmpty(deleteImageFileId)) { // 리스트가 비어있지 않은지 체크
		    List<AttachFileDto> fileNameList = fileMapper.selectAttachFileById(deleteImageFileId);
		    for (AttachFileDto attachFile : fileNameList) {
		    	try {
		    		// 순서 중요 (DB 선삭제 후 OCI 삭제/ 지운 이미지 복구는 못함)
		    		fileMapper.deleteAttachFile(attachFile.getAttachId());
		    		
		    		ociService.deleteFile(attachFile.getFilePath());
		    	} catch (Exception e) {
                    log.warn("updateNoticeDoc()메소드 파일 삭제 중 일부 오류 발생: {}", e.getMessage()); 
				}
		    }
		}
		
		return UpdateNoticeDocResponse.builder()
				.noticeDocId(docId)
				.build();
	}

	/**
	 * 공지 삭제
	 */
	@Override
	public void deleteNoticeDoc(DeleteNoticeDocRequest request) {
		String docId = request.getNoticeDocId();
		deleteDoc(docId);
	}
	
	private void deleteDoc(String docId) {
		try {
			// 순서 중요 (DB 선삭제 후 OCI 삭제/ 지운 이미지 복구는 못함)
			List<AttachFileDto> filesDto = fileMapper.selectAttachFileByDocId(docId);

			noticeMapper.deleteNoticeDoc(docId);
			fileMapper.deleteAttachFileByDocId(docId);
			
		    for (AttachFileDto fileDto : filesDto) {
		    	ociService.deleteFile(fileDto.getFilePath());
		    }
		}  catch (Exception e) {
			throw new InternalServerException(ErrorCode.DOC_DELETE_FAIL);
		}
	}

	/**
	 * 공지 목록 삭제
	 */
	@Override
	public void deleteNoticeDocList(DeleteNoticeDocListRequest request) throws InternalServerException {
	    for (String docId : request.getNoticeDocIds()) {
			deleteDoc(docId);
	    }
	}

	/**
	 * 공지 노출여부 설정
	 */
	@Override
	public void setDisplayFlagNoticeDocList(UpdateDisplayFlagNoticeDocListRequest request) {
	    for (DisplayFlagNoticeDocInfo docInfo : request.getDocList()) {
	        noticeMapper.updateNoticeDocDisplayFlag(docInfo.toDto());
	    }
	}

}
