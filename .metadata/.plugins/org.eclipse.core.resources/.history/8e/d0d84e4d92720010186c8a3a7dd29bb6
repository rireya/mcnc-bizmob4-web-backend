package com.mcnc.sm.hiplus.domain.attachFile.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.mcnc.bizmob.web.domain.attachFile.dto.AttachFileDto;
import com.mcnc.sm.hiplus.domain.commonCode.enums.BoardType;
import com.mcnc.sm.hiplus.global.exception.ErrorCode;
import com.mcnc.sm.hiplus.global.exception.InternalServerException;
import com.mcnc.sm.hiplus.global.service.OCIObjectStorageService;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class AttachFileService {

	@Autowired
	private OCIObjectStorageService objectStorageService;
	
	@Value("${image.file.download.path}")
	private String imageDirPath;
	
	public String uploadFile(AttachFileDto attachFileDto) throws IOException {
		MultipartFile file = attachFileDto.getFile();
		
		try {
			String originalFileName = attachFileDto.getFileName();
	        String filePath = generateUniqueFileName(attachFileDto); 
			objectStorageService.upload(filePath, originalFileName, file.getBytes());
			
			return filePath;
		} catch (IOException e) {
			log.error("파일 생성 실패");
			throw new InternalServerException(ErrorCode.FILE_UPLOAD_FAIL, e);
		}
		
	}
	
	public String deleteFile(AttachFileDto attachFileDto) throws IOException {
		MultipartFile file = attachFileDto.getFile();
		
		try {
			String originalFileName = attachFileDto.getFileName();
	        String filePath = generateUniqueFileName(attachFileDto); 
			objectStorageService.upload(filePath, originalFileName, file.getBytes());
			
			return filePath;
		} catch (IOException e) {
			log.error("파일 생성 실패");
			throw new InternalServerException(ErrorCode.FILE_UPLOAD_FAIL, e);
		}
		
	}
	
//	public String uploadFile(AttachFileDto attachFileDto) {
//		MultipartFile file = attachFileDto.getFile();
//		Path dirPath = Paths.get(imageDirPath);
//		
//		try {
//			// 디렉토리 존재 여부 확인
//			if(!Files.exists(dirPath)) {
//				log.debug("경로 : {} 존재하지 않으므로 생성합니다.", dirPath);
//				Files.createDirectory(dirPath);
//			}
//			
//	        String newFileName = generateUniqueFileName(attachFileDto); 
//			Path filePath = dirPath.resolve(newFileName);
//			
//			if(Files.exists(filePath)) {
//				log.debug("해당경로에 동일한 파일 명이 존재합니다. 파일명 : {}", newFileName);
//			}
//			log.debug("파일 생성 시작, 파일 경로: {}", filePath);
//			file.transferTo(filePath);
//
//			log.debug("파일 생성 성공");
//			
//			return newFileName;
//		} catch (IOException e) {
//			log.error("파일 생성 실패");
//			throw new InternalServerException(ErrorCode.FILE_UPLOAD_FAIL, e);
//		}
//		
//	}
	
	public void removeFile(String fileName) {
		Path dirPath = Paths.get(imageDirPath);
		
		try {
			// 디렉토리 존재 여부 확인
			if(!Files.exists(dirPath)) {
				log.debug("경로 : {} 존재하지 않습니다. 이미지 삭제를 종료합니다.", dirPath);
				return;
			}
			
			Path filePath = dirPath.resolve(fileName);
			if(!Files.exists(filePath)) {
				log.debug("파일이 존재하지않습니다 파일 경로 : {}", filePath);
				return;
			}
			
			Files.delete(filePath);
			log.debug("파일 삭제 성공. 파일 경로 : {}", filePath);
			
		} catch (IOException e) {
			log.error("파일 삭제 실패");
			throw new InternalServerException(ErrorCode.FILE_UPLOAD_FAIL, e);
		}
		
	}
	
	private String generateUniqueFileName(AttachFileDto attachFileDto) {
		String originalFileName = attachFileDto.getFileName();
		String docId = attachFileDto.getDocId();
		BoardType boardType = attachFileDto.getBoardType();
		
		String uuid = UUID.randomUUID().toString();
		String fileExtension = StringUtils.getFilenameExtension(originalFileName);
		
		return boardType + "/" +docId + "_" + uuid + "." +fileExtension;
	}
}
