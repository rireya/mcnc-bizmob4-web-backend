package com.mcnc.sm.hiplus.domain.commonCode.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mcnc.bizmob.web.domain.commonCode.dto.CommonCodeDto;
import com.mcnc.bizmob.web.domain.commonCode.dto.PostLocationCommonCodeDto;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.DeleteCommonCodeRequest;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.GetBoardCategoryListRequest;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.GetCommonCodeDetailRequest;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.PostLocationRequestDto;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.RegisterCommonCodeRequest;
import com.mcnc.bizmob.web.domain.commonCode.dto.request.UpdateCommonCodeRequest;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.DeleteCommonCodeResponse;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.GetBoardCategoryListResponse;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.GetCommonCodeDetailResponse;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.GetCommonCodeListResponse;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.PostLocationResponseDto;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.RegisterCommonCodeResponse;
import com.mcnc.bizmob.web.domain.commonCode.dto.response.UpdateCommonCodeResponse;
import com.mcnc.sm.hiplus.domain.commonCode.enums.BoardType;
import com.mcnc.sm.hiplus.domain.commonCode.mapper.CommonCodeMapper;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class CommonCodeServiceImpl implements CommonCodeService {
	
	@Autowired
	private CommonCodeMapper commonCodeMapper;
	
	@Override
	public GetCommonCodeListResponse getCommonCodeList() {
		List<CommonCodeDto> menuList = getCommonCodeList(null);
		
		return GetCommonCodeListResponse.builder()
				.commonCodeList(menuList)
				.build();
	}
	
	@Override
	public GetBoardCategoryListResponse getBoardCategoryList(GetBoardCategoryListRequest request) {
		BoardType boardType = request.getBoardType();
		
		// 1. 게시판에 해당하는 code_id 가져오기
		CommonCodeDto boardCategoryInfo = commonCodeMapper.selectCodeIdByBoardType(boardType.toString());
		
		String parentCodeId = boardCategoryInfo.getCodeId();
		String parentCodeName = boardCategoryInfo.getCodeName();
		
		// 2. 게시판을 부모로 하는 상위 카테고리 가져오기 (재귀)
		List<CommonCodeDto> categoryList = getCommonCodeList(parentCodeId);
		
		return GetBoardCategoryListResponse.builder()
				.categoryList(categoryList)
				.parentCodeId(parentCodeId)
				.parentCodeName(parentCodeName)
				.build();
	}
	
	
	@Override
	public List<String> getBoardCategoryIds(String parentCateId, String subCateId, BoardType boardType) {
	    List<String> categoryIds = new ArrayList<>();

	    if (parentCateId != null) {
	        if (StringUtils.isNotEmpty(subCateId)) { // 하위 카테고리 검색인 경우
		        categoryIds.add(subCateId);
		    } else { // 상위 카테고리에 대한 검색인 경우
		        List<CommonCodeDto> subCateList = commonCodeMapper.getBoardCategoryIds(parentCateId);
		        for (CommonCodeDto categoryInfo : subCateList) {
		        	categoryIds.add(categoryInfo.getCodeId());
		        }
		    }
	    }
	    // parentCateId가 null인 경우 빈 리스트 반환
	    return categoryIds;
	}


	private List<CommonCodeDto> getCommonCodeList(String parentCodeId) {
	    List<CommonCodeDto> parentCommonCodeList = commonCodeMapper.selectCommonCodeList(parentCodeId);
	    for (CommonCodeDto parent : parentCommonCodeList) {
	        // 자기 자신을 자식으로 조회하는 경우 방지
	        if (parent.getCodeId().equals(parentCodeId)) {
	            parent.setSubCommonCodeList(Collections.emptyList());
	            continue;
	        }

	        List<CommonCodeDto> subCommonCodeList = getCommonCodeList(parent.getCodeId());
	        parent.setSubCommonCodeList(subCommonCodeList);
	    }
	    

	    return parentCommonCodeList;
	}




	@Override
	public GetCommonCodeDetailResponse getCommonCodeDetail(GetCommonCodeDetailRequest request) {
		CommonCodeDto codeDetail = commonCodeMapper.selectCommonCodeDetail(request.getCodeId());
		return codeDetail.toResponseDetail();
	}

	@Override
	public RegisterCommonCodeResponse registerCommonCode(RegisterCommonCodeRequest request) {
		CommonCodeDto commonCode = request.toDto();
		
		String codeId = commonCodeMapper.selectNextCommonCodeId();
		commonCode.setCodeId(codeId);
		
		int res = commonCodeMapper.insertCommonCode(commonCode);

		return RegisterCommonCodeResponse.builder()
				.codeId(codeId)
				.build();
	}

	@Override
	public UpdateCommonCodeResponse updateCommonCode(UpdateCommonCodeRequest request) {
		CommonCodeDto commonCode = request.toDto();
		
		int res = commonCodeMapper.updateCommonCode(commonCode);

		return UpdateCommonCodeResponse.builder()
				.codeId(commonCode.getCodeId())
				.build();
	}

	@Override
	public DeleteCommonCodeResponse deleteCommonCode(DeleteCommonCodeRequest request) {
		String codeId = request.getCodeId();
		// 메뉴에 해당하는 하위 메뉴도 일괄삭제
		int res = commonCodeMapper.deleteCommonCode(codeId);
		
		return DeleteCommonCodeResponse.builder()
				.codeId(codeId)
				.build();
		
	}
	
    @Override
    public PostLocationResponseDto selectPostLocations(PostLocationRequestDto request) {

        String parentCodeId = commonCodeMapper.selectPostLocationCodeId(request);

        List<PostLocationCommonCodeDto> categoryList = commonCodeMapper.selectPostLocations(parentCodeId);

        PostLocationResponseDto response = new PostLocationResponseDto();
        response.setPostLocationList(categoryList);


        return response;
    }
}
