package com.mcnc.bizmob.web.domain.board.notice.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.mcnc.bizmob.web.domain.board.notice.dto.request.DeleteNoticeDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.DeleteNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.GetNoticeBoardDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.GetNoticeDocDetailRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.RegisterNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.UpdateDisplayFlagNoticeDocListRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.request.UpdateNoticeDocRequest;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.GetNoticeBoardDocListResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.GetNoticeDocDetailResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.RegisterNoticeDocResponse;
import com.mcnc.bizmob.web.domain.board.notice.dto.response.UpdateNoticeDocResponse;
import com.mcnc.sm.hiplus.domain.board.notice.service.NoticeService;
import com.mcnc.sm.hiplus.global.dto.response.ApiResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/board/notice")
@Tag(name = "[SMAD11xx] 공지사항 게시판 관련 Controller", description = "게시판 관리와 관련된 기능을 수행합니다.")
public class NoticeController {
	
	@Autowired
	private NoticeService noticeService;
	
	@PostMapping("/list")
    @Operation(summary = "[SMAD1101] 공지사항 게시판 목록 조회 및 조건 검색", description = "공지사항 게시판의 목록을 조건에 따라 조회합니다.")
    public ResponseEntity<ApiResponse<GetNoticeBoardDocListResponse>> getNoticeBoardDocLsit(@Valid @RequestBody GetNoticeBoardDocListRequest request) {
		ApiResponse<GetNoticeBoardDocListResponse> response = new ApiResponse<>(true, "공지사항 게시판 목록 조회 성공"); 
		
		response.setData(noticeService.getNoticeBoardDocList(request));
		
		return ResponseEntity.ok(response);
    }
	
	@PostMapping("/detail")
    @Operation(summary = "[SMAD1102] 공지사항 게시글 상세 조회", description = "공지사항 게시글을 상세 조회합니다.")
    public ResponseEntity<ApiResponse<GetNoticeDocDetailResponse>> getNoticeDocDetail(@Valid @RequestBody GetNoticeDocDetailRequest request) {
		ApiResponse<GetNoticeDocDetailResponse> response = new ApiResponse<>(true, "공지사항 게시판 게시글 상세 조회 성공"); 
		
		response.setData(noticeService.getNoticeDocDetail(request));
		
		return ResponseEntity.ok(response);
    }
	

	@PostMapping(value = "/register", consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.MULTIPART_FORM_DATA_VALUE})
    @Operation(summary = "[SMAD1103] 공지사항 게시글 작성", description = "공지사항 게시글을 등록합니다.")
    public ResponseEntity<ApiResponse<RegisterNoticeDocResponse>> registerNoticeDoc(
    		@Valid @RequestPart RegisterNoticeDocRequest request, 
    		@RequestPart(required = false) List<MultipartFile> imageFiles) {
		ApiResponse<RegisterNoticeDocResponse> response = new ApiResponse<>(true, "공지사항 게시판 게시글 등록 성공"); 
		
		response.setData(noticeService.registerNoticeDoc(request, imageFiles));
		
		return ResponseEntity.ok(response);
    }

	
	@PostMapping(value = "/update", consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.MULTIPART_FORM_DATA_VALUE})
    @Operation(summary = "[SMAD1104] 공지사항 게시글 수정", description = "공지사항 게시글을 수정합니다. ")
    public ResponseEntity<ApiResponse<UpdateNoticeDocResponse>> updateNoticeDoc(
    		@Valid @RequestPart UpdateNoticeDocRequest request, 
    		@RequestPart(required = false) List<MultipartFile> newImageFiles) {
		ApiResponse<UpdateNoticeDocResponse> response = new ApiResponse<>(true, "공지사항 게시판 게시글 수정 성공"); 
		
		response.setData(noticeService.updateNoticeDoc(request, newImageFiles));
		
		return ResponseEntity.ok(response);
    }
	
	@PostMapping(value = "/delete")
    @Operation(summary = "[SMAD1105] 공지사항 게시글 삭제", description = "공지사항 게시글을 삭제합니다. ")
    public ResponseEntity<ApiResponse<String>> deleteNoticeDoc(@Valid @RequestBody DeleteNoticeDocRequest request) {
		ApiResponse<String> response = new ApiResponse<>(true, "공지사항 게시판 게시글 단일 삭제 성공"); 
		noticeService.deleteNoticeDoc(request);
		return ResponseEntity.ok(response);
    }
	

	@PostMapping(value = "/delete/list")
    @Operation(summary = "[SMAD1106] 공지사항 게시글 일괄 삭제", description = "공지사항 게시글을 일괄 삭제합니다. ")
    public ResponseEntity<ApiResponse<String>> deleteNoticeDocList(@Valid @RequestBody DeleteNoticeDocListRequest request) {
		ApiResponse<String> response = new ApiResponse<>(true, "공지사항 게시판 게시글 일괄 삭제 성공"); 
		noticeService.deleteNoticeDocList(request);
		return ResponseEntity.ok(response);
    }
	

	@PostMapping(value = "/set/display/list")
    @Operation(summary = "[SMAD1107] 공지사항 게시글 노출 여부 일괄 설정", description = "공지사항 게시글을 노출 여부를 일괄 설정합니다. ")
    public ResponseEntity<ApiResponse<String>> updateNoticeDocListDisplayFlag(@Valid @RequestBody UpdateDisplayFlagNoticeDocListRequest request) {
		ApiResponse<String> response = new ApiResponse<>(true, "공지사항 게시판 게시글의 노출 여부 일괄 설정 성공"); 
		noticeService.setDisplayFlagNoticeDocList(request);
		return ResponseEntity.ok(response);
    }
}
